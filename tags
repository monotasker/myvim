pen this file in Vim and run :source % to restore your session.

set guioptions=aegimrLt
silent! set guifont=Dejavu\ Sans\ Mono\ 10
if exists('g:syntax_on') != 1 | syntax on | endif
if exists('g:did_load_filetypes') != 1 | filetype on | endif
if exists('g:did_load_ftplugin') != 1 | filetype plugin on | endif
if exists('g:did_indent_on') != 1 | filetype indent on | endif
if &background != 'dark'
set background=dark
endif
if !exists('g:colors_name') || g:colors_name != 'solarized' | colorscheme solarized | endif
call setqflist([])
let SessionLoad = 1
if &cp | set nocp | endif
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Dropbox/Simplenote
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
silent! argdel *
set lines=41 columns=157
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 31 + 78) / 157)
exe 'vert 2resize ' . ((&columns * 125 + 78) / 157)
argglobal
enew
" file NERD_tree_1
setlocal fdm=indent
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
wincmd w
argglobal
enew
setlocal fdm=indent
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
wincmd w
exe 'vert 1resize ' . ((&columns * 31 + 78) / 157)
exe 'vert 2resize ' . ((&columns * 125 + 78) / 157)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
tabnext 1
1wincmd w
let s:bufnr = bufnr("%")
NERDTree ~/Dropbox/Simplenote
execute "bwipeout" s:bufnr
1resize 39|vert 1resize 31|2resize 39|vert 2resize 125|
tabnext 1
1wincmd w

" vim: ft=vim ro nowrap smc=128

!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CommandTMatch_initialize	./bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_initialize	./bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_matches	./bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_matches	./bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_matches(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_score	./bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_score(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_to_s	./bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_to_s	./bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_to_s(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatcher_initialize	./bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_initialize	./bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_matches_for	./bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_matches_for	./bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev);$/;"	p	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_sorted_matches_for	./bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTMatcher_sorted_matches_for	./bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options);$/;"	p	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandT_option_from_hash	./bundle/command-t/ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f	signature:(const char *option, VALUE hash)
CommandT_option_from_hash	./bundle/command-t/ruby/command-t/ext.h	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash);$/;"	p	signature:(const char *option, VALUE hash)
Init_ext	./bundle/command-t/ruby/command-t/ext.c	/^void Init_ext()$/;"	f
RARRAY_LEN	./bundle/command-t/ruby/command-t/ruby_compat.h	43;"	d
RARRAY_PTR	./bundle/command-t/ruby/command-t/ruby_compat.h	38;"	d
RFLOAT_VALUE	./bundle/command-t/ruby/command-t/ruby_compat.h	48;"	d
RSTRING_LEN	./bundle/command-t/ruby/command-t/ruby_compat.h	33;"	d
RSTRING_PTR	./bundle/command-t/ruby/command-t/ruby_compat.h	28;"	d
__anon1::abbrev_len	./bundle/command-t/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
__anon1::abbrev_p	./bundle/command-t/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:	access:public
__anon1::always_show_dot_files	./bundle/command-t/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
__anon1::dot_file	./bundle/command-t/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:	access:public
__anon1::max_score_per_char	./bundle/command-t/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:	access:public
__anon1::never_show_dot_files	./bundle/command-t/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
__anon1::str_len	./bundle/command-t/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
__anon1::str_p	./bundle/command-t/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:	access:public
abbrev_len	./bundle/command-t/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
abbrev_p	./bundle/command-t/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:	access:public
always_show_dot_files	./bundle/command-t/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
cCommandTMatch	./bundle/command-t/ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	./bundle/command-t/ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
comp_alpha	./bundle/command-t/ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
comp_score	./bundle/command-t/ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
dot_file	./bundle/command-t/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:	access:public
mCommandT	./bundle/command-t/ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
matchinfo_t	./bundle/command-t/ruby/command-t/match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon1	file:
max_score_per_char	./bundle/command-t/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:	access:public
never_show_dot_files	./bundle/command-t/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
recursive_match	./bundle/command-t/ruby/command-t/match.c	/^double recursive_match(matchinfo_t *m,  \/\/ sharable meta-data$/;"	f	signature:(matchinfo_t *m, long str_idx, long abbrev_idx, long last_idx, double score)
ruby_inspect	./bundle/command-t/ruby/command-t/ext.h	36;"	d
str_len	./bundle/command-t/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
str_p	./bundle/command-t/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:	access:public
